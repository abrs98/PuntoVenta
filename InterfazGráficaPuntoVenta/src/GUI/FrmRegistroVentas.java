/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import control.ControlProducto;
import control.ControlProductoVenta;
import control.ControlUsuario;
import control.ControlVenta;
import entidades.Producto;
import entidades.ProductoVenta;
import entidades.Usuario;
import entidades.Venta;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.PersistenceException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.w3c.dom.css.RGBColor;

/**
 *
 * @author Abrahan Barrios
 */
public class FrmRegistroVentas extends javax.swing.JInternalFrame {

    // Atributos Heredados de las ventanas principales
    String tipoUsuario;
    int idAdmin = 1;
    int idCajero;
    String codigo = "";

    //Controladores de prouctos y ventas
    ControlProducto CProducto = new ControlProducto();
    ControlProductoVenta CProductoVenta = new ControlProductoVenta();
    ControlVenta CVenta = new ControlVenta();
    ControlUsuario CUsuario = new ControlUsuario();

    List<ProductoVenta> productosVenta = new ArrayList<>();

    Venta venta = new Venta();

    float total = 0;
    float subtotal = 0;
    float iva = 0;
    
    private void consultarProducto() {

        if (codigo != null) {
            Producto p = CProducto.consultarPorCodigo(codigo);
            if (p != null) {
                String precio = String.valueOf(p.getPrecio());
                lblPrecio.setText(precio);
                lblProducto.setText(p.getNombre());
                pnlResultado.setBackground(Color.green);
                txtCantidad.grabFocus();
            } else {
                lblProducto.setText("Producto no encontrado");
                lblPrecio.setText("");
                pnlResultado.setBackground(Color.red);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Clave erronea");
        }
    }

    public String getTipoUsuario() {
        return tipoUsuario;
    }

    public void setTipoUsuario(String tipoUsuario) {
        this.tipoUsuario = tipoUsuario;
    }

    public int getIdAdmin() {
        return idAdmin;
    }

    public void setIdAdmin(int idAdmin) {
        this.idAdmin = idAdmin;
    }

    public int getIdCajero() {
        return idCajero;
    }

    /**
     * Creates new form FrmVenta
     */
    public void setIdCajero(int idCajero) {
        this.idCajero = idCajero;
    }

    /**
     * Creates new form FrmVentas
     */
    public FrmRegistroVentas() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        btnCancelar = new javax.swing.JButton();
        txtClaveProducto = new javax.swing.JTextField();
        lblLista = new java.awt.Label();
        txtCantidad = new javax.swing.JTextField();
        label2 = new java.awt.Label();
        txtTotal = new javax.swing.JTextField();
        BtnAgregarProducto = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        BtnTerminar = new javax.swing.JButton();
        lblCant = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblListaVenta = new javax.swing.JTable();
        label3 = new java.awt.Label();
        pnlResultado = new javax.swing.JPanel();
        lblProducto = new javax.swing.JLabel();
        lblPrecio = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Venta");
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        escritorio.setBackground(new java.awt.Color(151, 157, 172));

        btnCancelar.setBackground(new java.awt.Color(3, 83, 164));
        btnCancelar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtClaveProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClaveProductoActionPerformed(evt);
            }
        });
        txtClaveProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtClaveProductoKeyPressed(evt);
            }
        });

        lblLista.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblLista.setForeground(new java.awt.Color(0, 18, 51));
        lblLista.setText("LISTA DE VENTA");

        label2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label2.setText("CÃ³digo de Producto");

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N

        BtnAgregarProducto.setBackground(new java.awt.Color(3, 83, 164));
        BtnAgregarProducto.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        BtnAgregarProducto.setForeground(new java.awt.Color(255, 255, 255));
        BtnAgregarProducto.setText("Agregar");
        BtnAgregarProducto.setToolTipText("Escanee un producto para agregarlo");
        BtnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarProductoActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 18, 51));
        lblTotal.setText("Total");

        BtnTerminar.setBackground(new java.awt.Color(3, 83, 164));
        BtnTerminar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        BtnTerminar.setForeground(new java.awt.Color(255, 255, 255));
        BtnTerminar.setText("Terminar");
        BtnTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTerminarActionPerformed(evt);
            }
        });

        lblCant.setBackground(new java.awt.Color(0, 0, 0));
        lblCant.setForeground(new java.awt.Color(0, 0, 0));
        lblCant.setText("Unidades / Peso (Kg)");

        TblListaVenta.setBackground(new java.awt.Color(125, 133, 151));
        TblListaVenta.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        TblListaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cantidad", "Nombre de Producto", "Precio Unitario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TblListaVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TblListaVentaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TblListaVenta);

        label3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        label3.setText("Cantidad");

        pnlResultado.setBackground(new java.awt.Color(51, 65, 92));
        pnlResultado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblProducto.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblProducto.setForeground(new java.awt.Color(0, 0, 0));
        lblProducto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblProducto.setText("Producto");

        lblPrecio.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lblPrecio.setForeground(new java.awt.Color(0, 0, 0));
        lblPrecio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrecio.setText("Precio");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout pnlResultadoLayout = new javax.swing.GroupLayout(pnlResultado);
        pnlResultado.setLayout(pnlResultadoLayout);
        pnlResultadoLayout.setHorizontalGroup(
            pnlResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addComponent(lblProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlResultadoLayout.setVerticalGroup(
            pnlResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResultadoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblProducto)
                .addGap(71, 71, 71))
            .addGroup(pnlResultadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnEliminar.setBackground(new java.awt.Color(51, 51, 51));
        btnEliminar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("(i) Seleccione un producto de la lista de venta");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 40, 85));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Venta");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setOpaque(true);

        escritorio.setLayer(btnCancelar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(txtClaveProducto, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(lblLista, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(txtCantidad, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(label2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(txtTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(BtnAgregarProducto, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(lblTotal, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(BtnTerminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(lblCant, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(label3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(pnlResultado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(btnEliminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorio.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioLayout.createSequentialGroup()
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(lblLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(escritorioLayout.createSequentialGroup()
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCant))
                            .addComponent(txtClaveProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(escritorioLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(BtnTerminar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addComponent(btnCancelar)
                .addGap(75, 75, 75)
                .addComponent(BtnAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(249, 249, 249))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(escritorioLayout.createSequentialGroup()
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(btnEliminar)))
                .addGap(24, 24, 24))
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCant))))
                    .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, escritorioLayout.createSequentialGroup()
                            .addComponent(txtClaveProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28))))
                .addGap(45, 45, 45)
                .addComponent(lblLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(escritorioLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnTerminar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        label2.getAccessibleContext().setAccessibleName("Codigo de Producto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTerminarActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "Â¿EstÃ¡ seguro que desea terminar la venta?", "ConfirmaciÃ³n", 2) == 0) {

            if (TblListaVenta.getRowCount() > 0) {
                try {

                    //Verificar si algun producto tiene promocion
                    //Agregar la venta a la base de datos\
                    venta.setTotal(total);

                    GregorianCalendar fecha = new GregorianCalendar();

                    venta.setFecha(fecha.getTime());

                    Usuario user = CUsuario.consultarPorIdUsuario(13);
                    System.out.println("Usuario > " + user);
                    venta.setIdUsuario(user);

                    //                    venta.setProductoVentaList(productosVenta);
                    CVenta.guardarVenta(venta);

                    System.out.println("ID Venta: " + venta.getIdVenta());

                    //Agregar productos de venta a la base de datos
                    for (int i = 0; i < productosVenta.size(); i++) {

                        ProductoVenta v = productosVenta.get(i);
                        Producto p = CProducto.consultarPorCodigo(productosVenta.get(i).getIdProducto().getCodigo());
                        float cantidad = v.getCantidad();
                        p.setStock(p.getStock() - cantidad);

                        v.setVenta(venta);

                        System.out.println(v.getVenta());

                        try {
                            CProducto.actualizarProducto(p);

                        } catch (PersistenceException e) {
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }
                        try {
                            CProductoVenta.guardarProductoVenta(v);

                        } catch (PersistenceException e) {
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }

                    }

                    JOptionPane.showMessageDialog(this, "Venta finalizada con Ã©xito. Folio: "
                            + venta.getIdVenta() + " Total: " + venta.getTotal(), "Venta finalizada", JOptionPane.INFORMATION_MESSAGE);

                    txtClaveProducto.setText("");
                    txtCantidad.setText("");
                    txtClaveProducto.grabFocus();

                    this.dispose();

                } catch (PersistenceException e) {
                    JOptionPane.showMessageDialog(null, "Ocurrio un error al hacer la venta " + e.getMessage(), "Lo sentimos", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    Logger.getLogger(FrmRegistroVentas.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Lista de venta vacia, agregue Productos");
                txtClaveProducto.setText("");
                txtCantidad.setText("");
                txtClaveProducto.grabFocus();

            }
        }
    }//GEN-LAST:event_BtnTerminarActionPerformed

    private void BtnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarProductoActionPerformed
        if (txtClaveProducto.getText().equals("") || txtCantidad.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Favor de llenar todos los campos");
        } else {

            DefaultTableModel modelo = (DefaultTableModel) TblListaVenta.getModel();
            Producto producto;

            //SecciÃ³n 2
            Object[] fila = new Object[3];
            String claveProducto = "";
            float cantidad = 0.0f;

            try {
                //Inicializar parametros de agregar producto
                claveProducto = txtClaveProducto.getText();
                cantidad = Float.parseFloat(txtCantidad.getText());

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Llenado fallido de los campos, intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
                txtClaveProducto.setText("");
                txtCantidad.setText("");
                txtClaveProducto.grabFocus();
                return;

            }
            //Verificar que el producto exista
            if (CProducto.consultarPorCodigo(claveProducto) != null) {
                if (CProducto.consultarPorCodigo(claveProducto).getStock() < cantidad) {
                    JOptionPane.showMessageDialog(this, "No se cuenta con suficientes articulos de este producto", "Error", JOptionPane.ERROR_MESSAGE);
                } else {

                    //Cr
                    producto = CProducto.consultarPorCodigo(claveProducto);

                    String nombreProducto = "";
                    float precioUnitario = 0.0f;

                    try {
                        nombreProducto = producto.getNombre();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "No se encontro el nombre del producto con la clave solicitada");
                        return;
                    }

                    try {

                        precioUnitario = producto.getPrecio();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "No se encontro el precio unitario del producto con la clave solicitada");
                        return;

                    }

                    //SecciÃ³n 3
                    fila[0] = cantidad;
                    fila[1] = nombreProducto;
                    fila[2] = precioUnitario;

                    //SecciÃ³n 4
                    //SecciÃ³n 5
                    // Almacenamiento de los detalles del producto vendido
                    ProductoVenta p = new ProductoVenta();
                    p.setCantidad(cantidad);
                    p.setIdProducto(producto);
                    p.setImporte(cantidad * p.getIdProducto().getPrecio());
                    p.setPrecio(p.getIdProducto().getPrecio());

                    //Validacion de que no se repitan los productos
                    int productoIgual = 0;

                    for (int i = 0; i < productosVenta.size(); i++) {
                        ProductoVenta prodLista = productosVenta.get(i);

                        if (prodLista.getIdProducto() == p.getIdProducto()) {

                            productoIgual = 1;
                            float sumaCantidades = prodLista.getCantidad() + p.getCantidad();
                            float sumaImportes = prodLista.getImporte() + p.getImporte();

                            if (sumaCantidades <= p.getIdProducto().getStock()) {

                                p.setCantidad(sumaCantidades);
                                p.setImporte(sumaImportes);
                                productosVenta.remove(i);
                                JOptionPane.showMessageDialog(null, "Las cantidaes de los productos repetidos han sido sumadas");
                                break;
                            } else {
                                JOptionPane.showMessageDialog(null, "No puede agregar este producto de nuevo, no hay suficiente stock");
                                return;
                            }
                        }

                    }

                    productosVenta.add(p);

                    subtotal += precioUnitario * cantidad;
                    total = subtotal;

                    txtTotal.setText(Float.toString(total));

                    txtClaveProducto.setText("");
                    txtCantidad.setText("");
                    txtClaveProducto.grabFocus();

                    if (productoIgual == 0) {
                        modelo.addRow(fila);
                        TblListaVenta.setModel(modelo);
                    } else {

                        for (int i = 0; i < TblListaVenta.getRowCount(); i++) {
                            if (TblListaVenta.getValueAt(i, 1).toString().equalsIgnoreCase(p.getIdProducto().getNombre())) {

                                TblListaVenta.setValueAt(p.getCantidad(), i, 0);
                                break;
                            }
                        }

                        JOptionPane.showMessageDialog(null, "Productos repetidos, se actualizÃ³ la cantidad en la lista",
                                "Informacion", JOptionPane.INFORMATION_MESSAGE);
                    }

                }
            } else {

                if (JOptionPane.showConfirmDialog(null, "Producto no encontrado, desea registrarlo? (ADMINISTRADOR)") == 0) {
                    FrmRegistroProducto p = new FrmRegistroProducto();
                    this.escritorio.add(p).setVisible(true);

                }

            }
        }
    }//GEN-LAST:event_BtnAgregarProductoActionPerformed

    private void txtClaveProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClaveProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClaveProductoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "Â¿EstÃ¡ seguro que desea cancelar la venta?", "ConfirmaciÃ³n", 2) == 0) {
            this.dispose();

        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Seccion para registrar ventas");
    }//GEN-LAST:event_formAncestorAdded

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) TblListaVenta.getModel();

        int row = TblListaVenta.getSelectedRow();

        float cantidad = (java.lang.Float) TblListaVenta.getValueAt(row, 0);
        float precio = (java.lang.Float) TblListaVenta.getValueAt(row, 2);
        String nombre = (java.lang.String) TblListaVenta.getValueAt(row, 1);

        //float cantidad = Float.parseFloat(c);
        //float precio = Float.parseFloat(p);
        int pos = -1;
        for (int i = 0; i < productosVenta.size(); i++) {
            if (productosVenta.get(i).getIdProducto().getNombre().equals(nombre)) {
                pos = i;
            }
        }

        if (pos != -1) {
            model.removeRow(TblListaVenta.getSelectedRow());
            productosVenta.remove(pos);
            subtotal -= precio * cantidad;
            total = subtotal;

            TblListaVenta.setModel(model);
            
            txtTotal.setText(Float.toString(total));

            txtClaveProducto.setText("");
            txtCantidad.setText("");
            txtClaveProducto.grabFocus();
        }
        
        if(TblListaVenta.getRowCount()==0){
            btnEliminar.setEnabled(false);
            btnEliminar.setBackground(Color.darkGray);
            TblListaVenta.clearSelection();
        }


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void TblListaVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TblListaVentaMouseClicked
        // TODO add your handling code here:
        // check for selected row first

        if (TblListaVenta.getSelectedRow() != -1) {
            // remove selected row from the model
            int row = TblListaVenta.getSelectedRow();
            System.out.println("Row Selected -> " + row);
            btnEliminar.setEnabled(true);
            btnEliminar.setBackground(Color.red);

        } else {
            btnEliminar.setEnabled(false);
            btnEliminar.setBackground(Color.darkGray);
            TblListaVenta.clearSelection();
        }
    }//GEN-LAST:event_TblListaVentaMouseClicked

    private void txtClaveProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClaveProductoKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_0:
                codigo += "0";
                break;

            case KeyEvent.VK_1:
                codigo += "1";
                break;
            case KeyEvent.VK_2:
                codigo += "2";
                break;

            case KeyEvent.VK_3:
                codigo += "3";
                break;

            case KeyEvent.VK_4:
                codigo += "4";
                break;
            case KeyEvent.VK_5:
                codigo += "5";
                break;

            case KeyEvent.VK_6:
                codigo += "6";
                break;

            case KeyEvent.VK_7:
                codigo += "7";
                break;
            case KeyEvent.VK_8:
                codigo += "8";
                break;

            case KeyEvent.VK_9:
                codigo += "9";
                break;
                
            case KeyEvent.VK_BACK_SPACE:
                String text = txtClaveProducto.getText();
                
                if(text.length()>2){
                codigo = text.substring(0, text.length()-1);
                }else if(text.length()==2){
                    codigo = text.substring(0,1);
                }else{
                    codigo = text.substring(0,0);
                }
                System.out.println(codigo);
                break;

            case KeyEvent.VK_ENTER:
                consultarProducto();
                codigo = "";
                break;

            default:
                break;
        }
    }//GEN-LAST:event_txtClaveProductoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregarProducto;
    private javax.swing.JButton BtnTerminar;
    private javax.swing.JTable TblListaVenta;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private javax.swing.JLabel lblCant;
    private java.awt.Label lblLista;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel pnlResultado;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtClaveProducto;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
